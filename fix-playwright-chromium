#!/usr/bin/env bash

# This requires that you have the google-chrome-dev package installed on NixOS
# (note that the executable name is google-chrome-unstable).

set -eu -o pipefail

chrome_wrapper=$(which google-chrome-unstable)
chrome_binary=$(cat "$chrome_wrapper" | grep '^exec ' | grep -o -P '/nix/store/[^"]+' | head -n 1)
chrome_dir=$(dirname "$chrome_binary")
chrome_rpath=$(patchelf --print-rpath "$chrome_dir/chrome")
chrome_interpreter=$(patchelf --print-interpreter "$chrome_dir/chrome")

# Via the args you can pass additional directories to patch, e.g.
# ~/code/js/svelte/node_modules/.pnpm/puppeteer@*/node_modules/puppeteer/.local-chromium/linux-*/chrome-linux
directories=(
	~/.cache/ms-playwright/chromium-*/chrome-linux
	"$@"
)

for dir in "${directories[@]}"; do
	i=$dir/chrome
	echo "wrapping: $i"
	# If we haven't moved it already, move chrome to chrome.bin because we need to wrap it
	if [[ $(stat -c%s "$i") -gt 1000000 ]]; then
		mv -i "$i" "$(dirname "$i")/chrome.bin"
	fi
	# Write our own wrapper based on NixOS's wrapper
	cat "$chrome_wrapper" | sed -r "s,^exec .*,exec \"$i.bin\" \"\$@\",g" > $(dirname "$i")/chrome
	chmod +x "$(dirname "$i")/chrome"
done

find "${directories[@]}" -executable -type f | while read i; do
	echo "patching binary: $i"
	if ! [[ "$i" == *.so ]]; then
		patchelf --set-interpreter "$chrome_interpreter" "$i" || true
	fi
	patchelf --set-rpath "$chrome_rpath" "$i" || true
done
